Part 1
1.)		The '-g' flag enables built-in debugging support which GDB needs.
2.)		0x0 was passed into the print_scrambled() functions. Since 0x0 is a null value, it caused the segmentation fault.
3.)		The address of the stack pointer is 0x7fffffffdec0, and the address of the frame pointer is 0x7fffffffdee0. The 'char*' argument is stored at 0x7fffffffdec8.

Part 2
4.)		1. The segfault occured in setint().
		2. Line 8 caused the segfault.
		3. main() is the caller of this function.
		4. The PC is at 0x40068f when the segfault occured.
5.)		memset() is linked at address 0x7ffff7df49b0. I figured this out by finding the PC value of memset() while it's being dynamically linked before main() is reached in exectuion.
6.)		(gdb) x/5i $pc
		=> 0x7ffff7aa15c0 <memset>:	movd   %esi,%xmm8
		   0x7ffff7aa15c5 <memset+5>:	mov    %rdi,%rax
		   0x7ffff7aa15c8 <memset+8>:	punpcklbw %xmm8,%xmm8
		   0x7ffff7aa15cd <memset+13>:	punpcklwd %xmm8,%xmm8
		   0x7ffff7aa15d2 <memset+18>:	pshufd $0x0,%xmm8,%xmm8
		Yes, memset() uses the kernel stack because the address of the memset() function call (0x7ffff7aa15c0)is very clearly in a different location from that of main() (0x40066e), setinint() (0x400618), and write_message(0x40062f), all of which should always reside in the user space stack.
7.)		The 'backtrace' command does not work properly here because the makefile specifies the use of the -fno-stack-protector flag which disables protection from stack smashing. This results in GDB attempting to access illegal memory locations which will not produce the expected functionality.